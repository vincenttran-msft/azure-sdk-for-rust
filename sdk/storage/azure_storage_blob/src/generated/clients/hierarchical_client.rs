// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::generated::models::{
    AppendBlobClientAppendBlockFromUrlOptions, AppendBlobClientAppendBlockFromUrlResult,
    AppendBlobClientAppendBlockOptions, AppendBlobClientAppendBlockResult,
    AppendBlobClientCreateOptions, AppendBlobClientCreateResult, AppendBlobClientSealOptions,
    AppendBlobClientSealResult,
};
use azure_core::{
    base64::encode,
    credentials::TokenCredential,
    fmt::SafeDebug,
    http::{
        policies::{BearerTokenCredentialPolicy, Policy},
        ClientMethodOptions, ClientOptions, Context, Method, NoFormat, Pipeline, RawResponse,
        Request, RequestContent, Response, Url,
    },
    time::to_rfc7231,
    Bytes, Result,
};
use std::sync::Arc;

pub struct HierarchicalClient {
    pub(crate) blob_name: String,
    pub(crate) container_name: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) version: String,
}

/// Options used when creating a `AppendBlobClient`
#[derive(Clone, SafeDebug)]
pub struct HierarchicalClientOptions {
    /// Allows customization of the client.
    pub client_options: ClientOptions,
    /// Specifies the version of the operation to use for this request.
    pub version: String,
}

impl HierarchicalClient {
    /// Creates a new HierarchicalClient, using Entra ID authentication.
    ///
    /// # Arguments
    ///
    /// * `endpoint` - Service host
    /// * `credential` - An implementation of [`TokenCredential`](azure_core::credentials::TokenCredential) that can provide an
    ///   Entra ID token to use when authenticating.
    /// * `container_name` - The name of the container.
    /// * `blob_name` - The name of the blob.
    /// * `options` - Optional configuration for the client.
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        container_name: String,
        blob_name: String,
        options: Option<HierarchicalClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        if !endpoint.scheme().starts_with("http") {
            return Err(azure_core::Error::message(
                azure_core::error::ErrorKind::Other,
                format!("{endpoint} must use http(s)"),
            ));
        }
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["https://storage.azure.com/.default"],
        ));
        Ok(Self {
            blob_name,
            container_name,
            endpoint,
            version: options.version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    pub async fn download(
        &self,
        options: Option<HierarchicalClientDownloadOptions<'_>>,
    ) -> Result<RawResponse> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        // Hack in the endpoint
        let endpoint = "https://ruststoragedevhns.dfs.core.windows.net/".to_string();
        let mut url = Url::parse(&endpoint)?;
        let mut path = String::from("{fileSystem}/{path}");
        path = path.replace("{path}", &self.blob_name);
        path = path.replace("{fileSystem}", &self.container_name);
        url = url.join(&path)?;
        let mut request = Request::new(url, Method::Get);
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    pub async fn create(
        &self,
        resource_type: String,
        options: Option<HierarchicalClientCreateOptions<'_>>,
    ) -> Result<RawResponse> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        // Hack in the endpoint
        let endpoint = "https://ruststoragedevhns.dfs.core.windows.net/".to_string();
        let mut url = Url::parse(&endpoint)?;
        let mut path = String::from("{fileSystem}/{path}?resource={resource}");
        path = path.replace("{path}", &self.blob_name);
        path = path.replace("{fileSystem}", &self.container_name);
        path = path.replace("{resource}", &resource_type);
        url = url.join(&path)?;
        let mut request = Request::new(url, Method::Put);
        request.insert_header("x-ms-version", &self.version);
        self.pipeline.send(&ctx, &mut request).await
    }

    pub async fn append_data(
        &self,
        data: RequestContent<Bytes>,
        offset: i64,
        length: i64,
        options: Option<HierarchicalClientAppendOptions<'_>>,
    ) -> Result<RawResponse> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        // Hack in the endpoint
        let endpoint = "https://ruststoragedevhns.dfs.core.windows.net/".to_string();
        let mut url = Url::parse(&endpoint)?;
        let mut path = String::from("{fileSystem}/{path}?action=append&position={blob_pos}");
        path = path.replace("{path}", &self.blob_name);
        path = path.replace("{fileSystem}", &self.container_name);
        path = path.replace("{blob_pos}", &offset.to_string());
        url = url.join(&path)?;
        let mut request = Request::new(url, Method::Patch);
        request.insert_header("x-ms-version", &self.version);
        request.insert_header("content-length", length.to_string());
        request.set_body(data);
        self.pipeline.send(&ctx, &mut request).await
    }

    pub async fn flush_data(
        &self,
        offset: i64,
        options: Option<HierarchicalClientFlushOptions<'_>>,
    ) -> Result<RawResponse> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        // Hack in the endpoint
        let endpoint = "https://ruststoragedevhns.dfs.core.windows.net/".to_string();
        let mut url = Url::parse(&endpoint)?;
        let mut path = String::from("{fileSystem}/{path}?action=flush&position={blob_pos}&retainUncommittedData=false&close=false");
        path = path.replace("{path}", &self.blob_name);
        path = path.replace("{fileSystem}", &self.container_name);
        path = path.replace("{blob_pos}", &offset.to_string());
        url = url.join(&path)?;
        let mut request = Request::new(url, Method::Patch);
        request.insert_header("x-ms-version", &self.version);
        request.insert_header("content-length", "0");
        self.pipeline.send(&ctx, &mut request).await
    }

    pub async fn rename_directory(
        &self,
        new_name: String,
        options: Option<HierarchicalClientRenameOptions<'_>>,
    ) -> Result<RawResponse> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        // Hack in the endpoint
        let endpoint = "https://ruststoragedevhns.dfs.core.windows.net/".to_string();
        let mut url = Url::parse(&endpoint)?;
        let mut path = String::from("{fileSystem}/{path}?mode=legacy");
        path = path.replace("{path}", &new_name);
        path = path.replace("{fileSystem}", &self.container_name);
        url = url.join(&path)?;
        let rename_source = format!("/{}/{}", &self.container_name, &self.blob_name);
        let mut request = Request::new(url, Method::Put);
        request.insert_header("x-ms-version", &self.version);
        request.insert_header("x-ms-rename-source", &rename_source);
        self.pipeline.send(&ctx, &mut request).await
    }

    pub async fn set_access_control(
        &self,
        options: Option<HierarchicalClientSetAccessControlOptions<'_>>,
    ) -> Result<RawResponse> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);

        // Hack in the endpoint
        let endpoint = "https://ruststoragedevhns.dfs.core.windows.net/".to_string();
        let mut url = Url::parse(&endpoint)?;
        let mut path = String::from("{fileSystem}/{path}?action=setAccessControl");
        path = path.replace("{path}", &self.blob_name);
        path = path.replace("{fileSystem}", &self.container_name);
        url = url.join(&path)?;
        let mut request = Request::new(url, Method::Patch);

        if let Some(owner) = &options.owner {
            request.insert_header("x-ms-owner", owner);
        }
        if let Some(group) = &options.group {
            request.insert_header("x-ms-group", group);
        }
        if let Some(permissions) = &options.permissions {
            request.insert_header("x-ms-permissions", permissions);
        }
        if let Some(acl) = &options.acl {
            request.insert_header("x-ms-acl", acl);
        }

        request.insert_header("x-ms-version", &self.version);
        request.insert_header("content-length", "0");
        self.pipeline.send(&ctx, &mut request).await
    }
}

#[derive(Clone, Default, SafeDebug)]
pub struct HierarchicalClientCreateOptions<'a> {
    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,
}

#[derive(Clone, Default, SafeDebug)]
pub struct HierarchicalClientSetAccessControlOptions<'a> {
    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,

    /// Optional owner of the resource.
    pub owner: Option<String>,

    /// Optional group associated with the resource.
    pub group: Option<String>,

    /// Optional permissions string.
    pub permissions: Option<String>,

    /// Optional access control list.
    pub acl: Option<String>,
}

#[derive(Clone, Default, SafeDebug)]
pub struct HierarchicalClientAppendOptions<'a> {
    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,
}

#[derive(Clone, Default, SafeDebug)]
pub struct HierarchicalClientDownloadOptions<'a> {
    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,
}

#[derive(Clone, Default, SafeDebug)]
pub struct HierarchicalClientFlushOptions<'a> {
    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,
}

#[derive(Clone, Default, SafeDebug)]
pub struct HierarchicalClientRenameOptions<'a> {
    /// Allows customization of the method call.
    pub method_options: ClientMethodOptions<'a>,
}

impl Default for HierarchicalClientOptions {
    fn default() -> Self {
        Self {
            client_options: ClientOptions::default(),
            version: String::from("2025-11-05"),
        }
    }
}
